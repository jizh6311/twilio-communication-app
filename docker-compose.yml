version: '3'

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CREATE_TOPICS=jaeger-spans:2:1
    depends_on:
      - zookeeper

  redis-server:
    image: 'redis:5.0-alpine'
    command: redis-server --requirepass devpassword
    volumes:
      - 'redis_data:/data'
    ports:
      - "6379"

  amp-sim-server:
    image: amp-sim-server
    build:
      context: ./
      dockerfile: ./amp_simulated_servers/Dockerfile-simulated-servers
      args:
        LAUNCHER_INI: flask_server.ini
    ports:
      - "7599"

  amp-sim-server0:
    image: amp-sim-server0
    build:
      context: ./
      dockerfile: ./amp_simulated_servers/Dockerfile-simulated-servers
      args:
        LAUNCHER_INI: flask_server0.ini
    ports:
      - "7590"

  amp-anomaly-models:
    image: amp-anomaly-models
    build:
      context: ./
      dockerfile: amp_anomaly_models/Dockerfile-anomaly-models
    depends_on:
      - redis-server

  amp-model-api:
    image: amp-model-api
    build:
      context: ./
      dockerfile: amp_model_api/Dockerfile-model-api
    ports:
      - "7699"

  nginx:
    image: webapp-nginx
    build:
      context: ./
      dockerfile: ./amp_model_api/Dockerfile-nginx
    ports:
      - "5000:5000"
      - "4090:4090"
      - "9545:9545"
    depends_on:
      - amp-sim-server
      - amp-sim-server0
      - amp-model-api

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    expose:
      - "9090"
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=foobar
      - GF_USERS_ALLOW_SIGN_UP=false

  jaeger-collector:
    image: jaegertracing/jaeger-collector:latest
    ports:
      - "14267:14267"
      - "14268:14268"
      - "14269:14269"
#     - "14250:14250"
      - "9411:9411"
    depends_on:
      - kafka
    environment:
      - SPAN_STORAGE_TYPE=kafka
      - METRICS_BACKEND=prometheus
      - LOG_LEVEL=debug
      - KAFKA_PRODUCER_BROKERS=kafka:9092
      - KAFKA_PRODUCER_TOPIC=jaeger_spans
      - KAFKA_PRODUCER_TLS_ENABLED=false

volumes:
  prometheus_data: {}
  grafana_data: {}
  redis_data: {}

